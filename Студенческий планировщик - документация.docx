# Документация по веб-приложению "Студенческий планировщик"

## 1. Краткое описание веб-приложения

### Назначение
"Студенческий планировщик" — это веб-приложение, разработанное для помощи студентам в организации своего учебного процесса. Приложение позволяет эффективно управлять расписанием занятий, отслеживать домашние задания, управлять задачами и планировать подготовку к экзаменам.

### Пользователи
Основная целевая аудитория приложения:
- Студенты высших и средних учебных заведений
- Преподаватели (для организации своих занятий и консультаций)
- Научные руководители (для координации работы со студентами)

### Основные возможности
- Управление расписанием занятий в календаре (день/неделя/месяц)
- Создание и отслеживание заданий по предметам
- Организация задач в канбан-доску (Todo, In Progress, Done)
- Создание категорий предметов с цветовой маркировкой
- Отслеживание прогресса выполнения заданий
- Визуализация учебной нагрузки в виде графиков
- Управление личным списком задач с приоритезацией

## 2. Архитектура приложения

### Общая архитектура
Приложение построено на основе клиент-серверной архитектуры с использованием фреймворка Next.js, обеспечивающего как серверную, так и клиентскую функциональность. Это полностью интегрированное решение, объединяющее фронтенд и бэкенд в едином приложении.

### Клиентская часть
- **Framework**: React.js в составе Next.js
- **UI-библиотека**: Material-UI (MUI) для компонентов интерфейса
- **Стилизация**: Tailwind CSS + встроенные стили MUI
- **Управление состоянием**: React Context API (AuthContext и др.)
- **Календарь**: FullCalendar (с плагинами daygrid, timegrid, interaction)
- **Канбан-доска**: react-beautiful-dnd
- **Графики и диаграммы**: Recharts
- **Типизация**: TypeScript

### Серверная часть
- **Framework**: Next.js с API Routes
- **База данных**: PostgreSQL
- **ORM**: Нативные запросы через пакет pg
- **Аутентификация**: JWT (JSON Web Tokens)
- **Хеширование паролей**: bcrypt
- **Server-side Rendering**: Next.js SSR возможности

### Взаимодействие клиента и сервера
1. Клиент отправляет запросы к API-эндпоинтам, реализованным через Next.js API Routes
2. Сервер аутентифицирует запросы с помощью JWT-токенов
3. Серверные компоненты взаимодействуют с PostgreSQL базой данных
4. Результаты запросов передаются клиенту в формате JSON
5. Клиентские компоненты отображают данные и обрабатывают взаимодействие пользователя

### Middleware
- Проверка аутентификации пользователей
- Перенаправление неаутентифицированных пользователей на страницу входа
- Перенаправление аутентифицированных пользователей с публичных страниц на дашборд

## 3. Структура базы данных

### Таблицы и их назначение

#### users
Хранит информацию о пользователях системы.
| Поле | Тип | Описание |
|------|-----|----------|
| id | SERIAL | Первичный ключ |
| name | VARCHAR(255) | Имя пользователя |
| email | VARCHAR(255) | Email (уникальный) |
| password | VARCHAR(255) | Хешированный пароль |
| created_at | TIMESTAMP | Дата создания аккаунта |

#### categories
Хранит категории предметов или занятий.
| Поле | Тип | Описание |
|------|-----|----------|
| id | SERIAL | Первичный ключ |
| name | VARCHAR(255) | Название категории |
| color | VARCHAR(50) | Цвет категории (HEX) |
| user_id | INTEGER | Внешний ключ к users |
| created_at | TIMESTAMP | Дата создания категории |

#### lessons
Хранит информацию о занятиях.
| Поле | Тип | Описание |
|------|-----|----------|
| id | SERIAL | Первичный ключ |
| title | VARCHAR(255) | Название занятия |
| start_time | TIMESTAMP | Время начала |
| end_time | TIMESTAMP | Время окончания |
| category_id | INTEGER | Внешний ключ к categories |
| user_id | INTEGER | Внешний ключ к users |
| location | VARCHAR(255) | Место проведения |
| description | TEXT | Описание занятия |
| created_at | TIMESTAMP | Дата создания записи |

#### assignments
Хранит задания, связанные с занятиями.
| Поле | Тип | Описание |
|------|-----|----------|
| id | SERIAL | Первичный ключ |
| title | VARCHAR(255) | Название задания |
| description | TEXT | Описание задания |
| due_date | TIMESTAMP | Срок выполнения |
| completed | BOOLEAN | Статус выполнения |
| status | VARCHAR(20) | Статус на канбан-доске |
| lesson_id | INTEGER | Внешний ключ к lessons |
| user_id | INTEGER | Внешний ключ к users |
| created_at | TIMESTAMP | Дата создания записи |

#### todos
Хранит личные задачи пользователя.
| Поле | Тип | Описание |
|------|-----|----------|
| id | SERIAL | Первичный ключ |
| title | VARCHAR(255) | Название задачи |
| completed | BOOLEAN | Статус выполнения |
| priority | VARCHAR(50) | Приоритет (low/medium/high) |
| user_id | INTEGER | Внешний ключ к users |
| created_at | TIMESTAMP | Дата создания записи |

### ER-диаграмма (в текстовом виде)
```
users (1) --- (*) categories
users (1) --- (*) lessons
users (1) --- (*) assignments
users (1) --- (*) todos
categories (1) --- (*) lessons
lessons (1) --- (*) assignments
```

### Индексы
- `idx_categories_user_id` на `categories(user_id)`
- `idx_lessons_user_id` на `lessons(user_id)`
- `idx_lessons_category_id` на `lessons(category_id)`
- `idx_assignments_user_id` на `assignments(user_id)`
- `idx_assignments_lesson_id` на `assignments(lesson_id)`
- `idx_todos_user_id` на `todos(user_id)`

## 4. Используемые технологии

### Фронтенд
- **React**: Библиотека для создания пользовательских интерфейсов
- **Next.js**: Фреймворк для разработки React-приложений с SSR и API Routes
- **TypeScript**: Типизированный JavaScript
- **Material-UI (MUI)**: Библиотека готовых React-компонентов
- **Tailwind CSS**: Утилитарный CSS-фреймворк
- **FullCalendar**: Библиотека для работы с календарем
  - Плагины: daygrid, timegrid, interaction, resource-timegrid
- **react-beautiful-dnd**: Библиотека для реализации Drag and Drop (канбан-доска)
- **Recharts**: Библиотека для создания графиков и диаграмм
- **react-colorful**: Компонент для выбора цвета
- **date-fns**: Библиотека для работы с датами

### Бэкенд
- **Next.js API Routes**: Серверные API-эндпоинты
- **PostgreSQL**: Реляционная база данных
- **pg**: Драйвер PostgreSQL для Node.js
- **jsonwebtoken**: Библиотека для работы с JWT
- **bcrypt**: Библиотека для хеширования паролей

### Инструменты разработки
- **ESLint**: Статический анализ кода
- **Postcss**: Инструмент для трансформации CSS
- **Autoprefixer**: Автоматическое добавление вендорных префиксов

## 5. Руководство пользователя

### Регистрация и вход
1. Перейдите на страницу регистрации `/register`
2. Заполните форму, указав имя, email и пароль
3. После регистрации вы будете перенаправлены на страницу входа
4. Введите ваш email и пароль для входа в систему

### Работа с дашбордом
После авторизации вы попадаете на дашборд, который содержит:
- Сводку предстоящих занятий
- Список заданий на выполнение
- График учебной нагрузки
- Список задач и их статус

### Управление категориями предметов
1. Перейдите в раздел "Категории" через боковое меню
2. Нажмите "Добавить категорию"
3. Введите название категории и выберите цвет
4. Для редактирования категории нажмите на иконку редактирования
5. Для удаления категории нажмите на иконку корзины

### Работа с календарем
1. Перейдите в раздел "Календарь" через боковое меню
2. Выберите подходящий вид календаря (день/неделя/месяц)
3. Для добавления занятия кликните по свободному месту в календаре
4. Заполните форму создания занятия (название, время, категория, место проведения)
5. Для редактирования занятия кликните на него в календаре
6. Для удаления занятия откройте его и нажмите кнопку "Удалить"

### Управление заданиями
1. Перейдите в раздел "Задания" или кликните на занятие в календаре
2. Нажмите "Добавить задание"
3. Заполните форму создания задания (название, описание, срок выполнения)
4. Задания можно отмечать как выполненные
5. Для просмотра всех заданий используйте канбан-доску

### Работа с канбан-доской
1. На канбан-доске все задания распределены по столбцам: "Todo", "In Progress", "Done"
2. Перетаскивайте карточки между столбцами для изменения их статуса
3. Нажмите на карточку для просмотра подробностей задания
4. Используйте фильтры для отображения заданий по категориям

### Управление личными задачами
1. В разделе "Задачи" отображается список ваших личных задач
2. Добавьте новую задачу, указав название и приоритет
3. Отмечайте задачи как выполненные
4. Удаляйте ненужные задачи

## 6. Инструкция по развертыванию

### Требования
- Node.js (версия 16+)
- PostgreSQL (версия 12+)
- npm или yarn

### Шаги по установке

#### 1. Клонирование репозитория
```bash
git clone https://github.com/ваш-репозиторий/student-planner.git
cd student-planner
```

#### 2. Установка зависимостей
```bash
npm install
# или
yarn install
```

#### 3. Настройка базы данных
1. Создайте базу данных PostgreSQL:
```bash
psql -U postgres
CREATE DATABASE studentplanner;
\q
```

2. Инициализируйте структуру базы данных:
```bash
psql -U postgres -d studentplanner -f db-init.sql
```

#### 4. Настройка переменных окружения
Создайте файл `.env.local` в корне проекта со следующими переменными:
```
POSTGRES_USER=postgres
POSTGRES_PASSWORD=ваш_пароль
POSTGRES_HOST=localhost
POSTGRES_PORT=5432
POSTGRES_DB=studentplanner
JWT_SECRET=ваш_секретный_ключ
```

#### 5. Запуск приложения в режиме разработки
```bash
npm run dev
# или
yarn dev
```

#### 6. Сборка для продакшена
```bash
npm run build
npm start
# или
yarn build
yarn start
```

### Деплой приложения
Для деплоя рекомендуется использовать платформы, поддерживающие Next.js:
- Vercel
- Netlify
- AWS Amplify
- Heroku

При деплое необходимо:
1. Настроить переменные окружения на платформе деплоя
2. Создать и настроить базу данных PostgreSQL
3. Настроить SSL-сертификат для HTTPS

## 7. Рекомендации по расширению функционала

### Улучшение пользовательского опыта
- Добавление темной темы интерфейса
- Расширение возможностей кастомизации интерфейса
- Интеграция push-уведомлений о приближающихся сроках
- Поддержка мобильной версии и PWA

### Социальные функции
- Возможность делиться заданиями с другими студентами
- Групповые календари для студенческих групп
- Интеграция с учебными платформами вуза

### Расширение возможностей работы с заданиями
- Система оценки сложности заданий
- Автоматическая приоритизация задач по срокам и сложности
- Возможность прикрепления файлов и ссылок к заданиям
- Система напоминаний о приближающихся дедлайнах

### Аналитика и статистика
- Расширение аналитики успеваемости
- Отслеживание прогресса по отдельным предметам
- Прогнозирование загруженности на основе текущих заданий
- Создание отчетов по успеваемости

### Интеграции
- Интеграция с Google Calendar, Microsoft Outlook
- Синхронизация с облачными хранилищами (Google Drive, Dropbox)
- Интеграция с сервисами для заметок (Evernote, Notion)
- Интеграция с системами управления обучением (LMS)

### Техническое развитие
- Улучшение производительности работы с базой данных
- Переход на ORM для более безопасной работы с данными
- Внедрение системы тестирования (unit/integration/e2e)
- Улучшение архитектуры для масштабирования 